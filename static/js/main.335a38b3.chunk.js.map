{"version":3,"sources":["components/Notes/contants.ts","components/Notes/Note/ColorPicker.tsx","components/Notes/Note/TextEditor.tsx","components/Notes/Note/LayerController.tsx","components/Notes/Note/Note.tsx","components/Notes/hooks/useDrag.ts","components/Notes/hooks/useResize.ts","components/Notes/hooks/useDelete.ts","components/Notes/AddNoteButton.tsx","components/Notes/Notes.tsx","hooks/useStore.ts","components/TrashZone.tsx","components/App.tsx","index.tsx"],"names":["NODE_LIST","Sample","styled","label","NoteColorPicker","memo","color","onChangeColor","handleChange","useCallback","e","target","value","htmlFor","id","type","onChange","Editor","div","NoteTextEditor","text","containerMinSize","onSave","useState","active","setActive","ref","useRef","handleClick","document","addEventListener","currentTarget","current","innerHTML","once","useEffect","focus","onClick","contentEditable","suppressContentEditableWarning","style","fontSize","Button","NoteLayerController","title","Wrapper","css","Body","isAboutToDelete","Note","onFinish","onHover","onDelete","onMoveNoteToTop","isOnTopOfLayer","props","handleSave","properties","handleDelete","handleLayerButtonClick","note","onDragStart","event","currentLeft","currentTop","offsets","getBoundingClientRect","offsetTop","top","offsetLeft","left","shiftX","pageX","shiftY","pageY","move","transform","removeEventListener","onResizeStart","contentRect","size","width","height","useResize","saveColorTimer","isInsideTrashZone","setIsInside","handleIntersect","entry","isIntersecting","observer","useMemo","safeZone","getElementById","IntersectionObserver","threshold","root","observe","disconnect","useDelete","handleMouseDown","handleChangeColor","background","clearTimeout","window","setTimeout","zIndex","onMouseDown","ColorPicker","LayerController","TextEditor","Math","min","button","AddNoteButton","newNote","Notes","activeNote","setActiveNote","key","defaultParam","initialState","JSON","parse","localStorage","getItem","store","setStore","next","setItem","stringify","useStore","notesFromStore","setNotes","notes","highestIndex","forEach","max","noteProps","nextNotes","map","filter","handleClickButton","nextNote","performance","now","handleMoveNoteToTop","TrashWrap","TrashZone","children","GlobalStyles","createGlobalStyle","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.335a38b3.chunk.js","sourcesContent":["export const NODE_LIST = 'node-list';\n","import React, { memo, useCallback } from 'react';\nimport styled from 'styled-components';\n\nconst Sample = styled.label`\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  background: inherit;\n  position: absolute;\n  right: -40px;\n\n  & + input {\n    visibility: hidden;\n    position: absolute;\n  }\n`;\n\ntype Props = {\n  color: string;\n  onChangeColor: (color: string) => void;\n};\n\nconst NoteColorPicker = memo<Props>(({ color, onChangeColor }) => {\n  const handleChange = useCallback((e) => {\n    onChangeColor(e.target.value);\n  }, [onChangeColor]);\n  \n  return (\n    <>\n      <Sample htmlFor=\"color-picker\" />\n      <input\n        id=\"color-picker\"\n        type=\"color\"\n        value={color}\n        onChange={handleChange}\n      />\n    </>\n  );\n});\n\nexport default NoteColorPicker;\n","import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport { INote } from '../types';\n\nconst Editor = styled.div`\n  position: relative;\n  display: inline-block;\n  padding: 20px;\n  box-sizing: border-box;\n  outline: none;\n  max-width: 100%;\n  word-break: break-all;\n\n  &:empty:before {\n    content: 'Place some text here';\n    opacity: 0.3;\n  }\n`;\n\ntype Props = {\n  containerMinSize: number;\n  text: string;\n  onSave: (p: Pick<INote, 'text'>) => void;\n};\n\nconst NoteTextEditor = memo<Props>(({ text, containerMinSize, onSave }) => {\n  const [active, setActive] = useState(false);\n  const ref = useRef<HTMLDivElement | null>(null);\n\n  const handleClick = useCallback(() => {\n    setActive(true);\n\n    document.addEventListener(\n      'mousedown',\n      (e) => {\n        if (e.currentTarget !== ref.current) {\n          setActive(false);\n          onSave({ text: ref.current?.innerHTML || '' });\n        }\n      },\n      { once: true }\n    );\n  }, [onSave]);\n\n  useEffect(() => {\n    active && ref.current?.focus();\n  }, [active]);\n\n  return (\n    <Editor\n      ref={ref}\n      onClick={handleClick}\n      contentEditable={active}\n      suppressContentEditableWarning\n      style={{ fontSize: containerMinSize / 5 }}\n    >\n      {text}\n    </Editor>\n  );\n});\n\nexport default NoteTextEditor;\n","import React, { memo } from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.div`\n  width: 32px;\n  height: 32px;\n  border-radius: 4px;\n  background: lightblue;\n  position: absolute;\n  right: -40px;\n  top: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  font-size: 12px;\n  cursor: pointer;\n`;\n\ntype Props = {\n  onClick: () => void;\n};\n\nconst NoteLayerController = memo<Props>(({ onClick }) => (\n  <Button onClick={onClick} title=\"Move to top\">\n    Move Top\n  </Button>\n));\n\nexport default NoteLayerController;\n","import React, { memo, useCallback, useRef } from 'react';\nimport styled, { css } from 'styled-components';\n\nimport { useDrag, useResize, useDelete } from '../hooks';\nimport ColorPicker from './ColorPicker';\nimport TextEditor from './TextEditor';\nimport LayerController from './LayerController';\nimport { INote } from '../types';\n\ntype WrapperProps = {\n  isAboutToDelete: boolean;\n};\n\ntype Props = INote & {\n  active: boolean;\n  isOnTopOfLayer: boolean;\n\n  onMoveNoteToTop: (id: number) => void;\n  onDelete: (id: number) => void;\n  onHover: (id: number) => void;\n  onSave: (id: number, property: Partial<INote>) => void;\n};\n\nconst Wrapper = styled.div<Pick<Props, 'active'>>`\n  position: absolute;\n\t${({ active }) => active && css`\n\t\twill-change: transform;\n\t`}\n`;\n\nconst Body = styled.div<WrapperProps>`\n  resize: both;\n  box-shadow: 0 3px 5px 1px rgba(0, 0, 0, 0.2);\n  border-radius: 4px;\n  overflow: auto;\n\t${({ isAboutToDelete }) => isAboutToDelete && css`\n\t\topacity: 0.5;\n\t`}\n`;\n\nconst Note = memo<Props>(\n  ({\n    onHover,\n    active,\n    onDelete,\n    onMoveNoteToTop,\n    isOnTopOfLayer,\n    onSave,\n    ...props\n  }) => {\n    const handleSave = useCallback(\n      (properties: Partial<INote>) => {\n        onSave(props.id, properties);\n      },\n      [props.id, onSave]\n    );\n\n    const handleDelete = useCallback(() => {\n      onDelete(props.id);\n    }, [props.id, onDelete]);\n\n    const handleLayerButtonClick = useCallback(() => {\n      onMoveNoteToTop(props.id);\n    }, [props.id, onMoveNoteToTop]);\n\n    const note = useRef<HTMLDivElement | null>(null);\n    const onDragStart = useDrag(handleSave);\n    const onResizeStart = useResize(handleSave);\n    const saveColorTimer = useRef<number>();\n    const isAboutToDelete = useDelete(note, handleDelete);\n\n    const handleMouseDown = useCallback(\n      (e: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n        onHover(props.id);\n        const target = e.currentTarget;\n        const offsets = target.getBoundingClientRect();\n\n        // check if mouse is on bottom-right side of note\n        if (\n          offsets.width + offsets.left - e.pageX < 20 &&\n          offsets.height + offsets.top - e.pageY < 20\n        ) {\n          onResizeStart();\n          return;\n        }\n\n        onDragStart(e);\n      },\n      [onHover, onDragStart]\n    );\n\n    const handleChangeColor = useCallback((color) => {\n        if (!note.current) return;\n\n        note.current.style.background = color;\n\n        clearTimeout(saveColorTimer.current);\n        saveColorTimer.current = window.setTimeout(handleSave, 300, { color });\n      }, [handleSave]);\n\n    const [left, top] = props.transform;\n    const [width, height] = props.size;\n\n    return (\n      <Wrapper\n        style={{\n          transform: `translate(${left}px, ${top}px)`,\n          zIndex: props.zIndex,\n        }}\n        onMouseDown={handleMouseDown}\n        active={active}\n      >\n        <Body\n          style={{ width, height, background: props.color }}\n          ref={note}\n          isAboutToDelete={isAboutToDelete}\n        >\n          {active && (\n            <>\n              <ColorPicker\n                color={props.color}\n                onChangeColor={handleChangeColor}\n              />\n              {!isOnTopOfLayer && (\n                <LayerController onClick={handleLayerButtonClick} />\n              )}\n            </>\n          )}\n\n          <TextEditor\n            text={props.text}\n            containerMinSize={Math.min(width, height)}\n            onSave={handleSave}\n          />\n        </Body>\n      </Wrapper>\n    );\n  }\n);\n\nexport default Note;\n","import React, { useCallback } from 'react';\nimport { INote } from '../types';\n\nexport const useDrag = (onFinish: (o: Pick<INote, 'transform'>) => void) => {\n  return useCallback(\n    (event: React.MouseEvent<HTMLDivElement, MouseEvent>) => {\n      const target = event.currentTarget;\n      const offsets = target.getBoundingClientRect();\n      const offsetTop = offsets.top;\n      const offsetLeft = offsets.left;\n      const shiftX = event.pageX - offsetLeft + 25;\n      const shiftY = event.pageY - offsetTop + 25;\n\n      let currentLeft: number;\n      let currentTop: number;\n\n      const move = (e: MouseEvent) => {\n        currentLeft = e.pageX - shiftX;\n        currentTop = e.pageY - shiftY;\n        target.style.transform = `translate(${currentLeft}px, ${currentTop}px)`;\n      };\n\n      document.addEventListener('mousemove', move);\n\n      document.addEventListener(\n        'mouseup',\n        () => {\n          document.removeEventListener('mousemove', move);\n          currentLeft &&\n            currentTop &&\n            onFinish({ transform: [currentLeft, currentTop] });\n        },\n        { once: true }\n      );\n    },\n    [onFinish]\n  );\n};\n","import { useCallback } from 'react';\nimport { INote } from '../types';\n\nexport const useResize = (onFinish: (s: Pick<INote, 'size'>) => void) => {\n  return useCallback(() => {\n    document.addEventListener(\n      'mouseup',\n      (e) => {\n        if (!e.target) return;\n        const contentRect = (e.target as HTMLDivElement).getBoundingClientRect();\n\n        onFinish({\n          size: [contentRect.width, contentRect.height],\n        });\n      },\n      { once: true }\n    );\n  }, [onFinish]);\n};\n","import {\n  useCallback,\n  useEffect,\n  useMemo,\n  MutableRefObject,\n  useState,\n} from 'react';\n\nimport { NODE_LIST } from '../contants';\n\nexport const useDelete = (\n  ref: MutableRefObject<HTMLDivElement | null>,\n  onDelete: () => void\n) => {\n  const [isInsideTrashZone, setIsInside] = useState(false);\n  const handleIntersect = useCallback<IntersectionObserverCallback>(\n    ([entry]) => {\n      setIsInside(!entry.isIntersecting);\n\n      if (entry.isIntersecting) {\n        document.removeEventListener('mouseup', onDelete);\n        return;\n      }\n\n      document.addEventListener('mouseup', onDelete, { once: true });\n    },\n    [onDelete]\n  );\n\n  const observer = useMemo(() => {\n    const safeZone = document.getElementById(NODE_LIST);\n    if (!safeZone) return null;\n\n    return new IntersectionObserver(handleIntersect, {\n      threshold: 1,\n      root: safeZone,\n    });\n  }, [ref.current, handleIntersect]);\n\n  useEffect(() => {\n    if (!observer) return;\n    ref.current && observer.observe(ref.current);\n    return () => {\n      observer.disconnect();\n    };\n  }, [ref.current, observer]);\n\n  return isInsideTrashZone;\n};\n","import React, { HTMLAttributes, memo } from 'react';\nimport styled from 'styled-components';\n\nconst Button = styled.button`\n  width: 50px;\n  height: 50px;\n  position: absolute;\n  z-index: 5000;\n  outline: none;\n  border: none;\n  font-size: 36px;\n  background: #61dafb;\n  cursor: pointer;\n  top: 0;\n  left: 0;\n`;\nconst AddNoteButton = memo<HTMLAttributes<HTMLButtonElement>>((props) => {\n  return <Button {...props}>+</Button>;\n});\n\nexport default AddNoteButton;\n","import React, { memo, useCallback, useEffect, useRef, useState } from 'react';\nimport styled from 'styled-components';\n\nimport Note from './Note';\nimport AddNoteButton from './AddNoteButton';\nimport { NODE_LIST } from './contants';\nimport { useStore } from 'hooks';\nimport { INote } from './types';\n\nconst Wrapper = styled.div`\n  position: relative;\n  background: white;\n  width: 100%;\n  height: 100%;\n`;\n\nconst newNote: INote = {\n  text: '',\n  id: 1,\n  color: '#0075ab',\n  zIndex: 1,\n  size: [200, 200] as const,\n  transform: [300, 300] as const,\n};\n\nconst Notes = memo(() => {\n  const [activeNote, setActiveNote] = useState<null | number>(null);\n  const [notesFromStore, setNotes] = useStore<INote[]>('notes', []);\n  const notes = useRef<INote[]>(notesFromStore);\n  const highestIndex = useRef<number>(1);\n\n  if (notesFromStore !== notes.current) {\n    notes.current = notesFromStore as INote[];\n  }\n\n  useEffect(() => {\n    notes.current.forEach(({ zIndex }) => {\n      highestIndex.current = Math.max(zIndex, highestIndex.current);\n    });\n  }, []);\n\n  const handleSave = useCallback((id, noteProps) => {\n    const nextNotes = notes.current.map((note) =>\n      note.id !== id ? note : { ...note, ...noteProps }\n    );\n    setNotes(nextNotes);\n  }, []);\n\n  const handleDelete = useCallback((id) => {\n    const nextNotes = notes.current.filter((note) => note.id !== id);\n    setNotes(nextNotes);\n  }, []);\n\n  const handleClickButton = useCallback(() => {\n    highestIndex.current += 1;\n    const nextNote = {\n      ...newNote,\n      id: performance.now(),\n      zIndex: highestIndex.current,\n    };\n    setNotes([...notes.current, nextNote]);\n    setActiveNote(nextNote.id);\n  }, []);\n\n  const handleMoveNoteToTop = useCallback((id) => {\n    highestIndex.current += 1;\n    handleSave(id, { zIndex: highestIndex.current });\n  }, []);\n\n  return (\n    <Wrapper id={NODE_LIST}>\n      <AddNoteButton onClick={handleClickButton} />\n      {notes.current.map((note) => (\n        <Note\n          key={note.id}\n          {...note}\n          transform={note.transform}\n          active={activeNote === note.id}\n          onHover={setActiveNote}\n          onMoveNoteToTop={handleMoveNoteToTop}\n          onSave={handleSave}\n          onDelete={handleDelete}\n          isOnTopOfLayer={highestIndex.current === note.zIndex}\n        />\n      ))}\n    </Wrapper>\n  );\n});\n\nexport default Notes;\n","import { useCallback, useState } from 'react';\n\ntype ReturnParams<T> = [store: T, set: (store: T) => void];\n\nexport const useStore = <T extends unknown>(\n  key: string,\n  defaultParam?: T\n): ReturnParams<T> => {\n  const initialState =\n    JSON.parse(localStorage.getItem(key) as string) ?? defaultParam;\n  const [store, setStore] = useState<T>(initialState);\n\n  const set = useCallback((next) => {\n    localStorage.setItem(key, JSON.stringify(next));\n    setStore(next);\n  }, []);\n\n  return [store, set];\n};\n","import React from 'react';\nimport styled from 'styled-components';\n\nconst TrashWrap = styled.div`\n  padding: 25px;\n  position: relative;\n  width: 100vw;\n  height: 100vh;\n  box-sizing: border-box;\n  background: repeating-linear-gradient(\n    -55deg,\n    #222,\n    #222 10px,\n    #333 10px,\n    #333 20px\n  );\n`;\n\nconst TrashZone: React.FC = ({ children }) => (\n  <TrashWrap>\n    {children}\n  </TrashWrap>\n);\n\nexport default TrashZone;\n","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\n\nimport Notes from './Notes';\nimport TrashZone from './TrashZone';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    overflow: hidden;\n    margin: 0;\n    padding: 0;\n    font-family: Roboto, sans-serif;\n  }\n`;\n\nconst App = () =>  (\n  <>\n    <GlobalStyles />\n    <TrashZone>\n      <Notes />\n    </TrashZone>\n  </>\n);\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { createGlobalStyle } from 'styled-components';\n\nimport App from 'components/App';\n\nconst GlobalStyles = createGlobalStyle`\n  body {\n    overflow: hidden;\n  }\n`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <GlobalStyles />\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}